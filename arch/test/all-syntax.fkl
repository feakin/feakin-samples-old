include "../config"

Context Cinema {
    Aggregate Cinema;
}

Aggregate Cinema {
    Entity Cinema, ScreeningRoom, Seat;
}

Entity Cinema {}
Entity ScreeningRoom {}
Entity Seat {}

Context Movie {
    Aggregate Movie;
}

Aggregate Movie {
    Entity Movie, Actor, Publisher;
}

Entity Movie {}
Entity Actor {}
Entity Publisher {}

Context User {
    Aggregate User;
}

Aggregate User {
    Entity User;
}

Entity User {
    Struct {
        id: UUID;
        mobile: String;
        email: String;
        username: String;
        password: String;
        address: String;
    }
}

Entity Payment {
    Struct {
        id: UUID;
        amount: BigDecimal;
        currency: Currency;
        status: PaymentStatus;
        createdAt: LocalDateTime;
    }
}

ValueObject Price {}
ValueObject Notifications {}

layered DDD {
    // by default
    dependency {
        interface -> application
        interface -> domain
        interface -> infrastructure
        application -> infrastructure
        application -> domain
    }
    layer interface {
        package: "com.feakin.demo.rest";
    }
    layer domain {
        package: "com.feakin.demo.domain";
    }
    layer application {
        package: "com.feakin.demo.application";
    }
    layer infrastructure {
        package: "com.feakin.demo.infrastructure";
    }
}


impl CinemaCreated {
    endpoint {
        POST "${uri}/post";
        request: Request;
        authorization: Basic "{{username}}" "{{password}}";
    }

    // created in ApplicationService
    flow {
        via UserRepository::getUserById() receive user: User
        // send "book.created" to Kafka
        via UserRepository::saveUser(user: User) receive void
        // or
        via UserRepository::save(user: User) receive user: User;
        // message queue
        via MessageQueue send CinemaCreated to "CinemaCreated"
        // http request
        via HTTP::post() send Message to "${uri}/post"
        // grpc Greeter
        via GRPC::Greeter send CinemaCreated to "CinemaCreated"
        // map filter
        when (isUserValid) {
            is true => {
                // do something
            }
            is false => {
                // do something
            }
        }
    }
}

var source: JavaSource {
    language: "Java";
    package: "com.phodal.coco";
}

def ContextMap {
    // todo: parser generator
    sample: String;
}
